/**
 * Script final para testar se o sistema de lembretes est√° funcionando corretamente
 */

const { executeQuery } = require('../connect/mysql');
const { getUpcomingInterviews } = require('../controllers/hr-job-openings');

async function testFinalSystem() {
  console.log('üß™ TESTE FINAL DO SISTEMA DE LEMBRETES');
  console.log('=' .repeat(60));
  
  try {
    // 1. Verificar estrutura da tabela
    console.log('\nüìã 1. VERIFICANDO ESTRUTURA DA TABELA:');
    const tableStructure = await executeQuery(`
      SELECT COLUMN_TYPE 
      FROM INFORMATION_SCHEMA.COLUMNS 
      WHERE TABLE_NAME = 'hr_interview_email_logs' 
      AND COLUMN_NAME = 'email_type'
    `);
    
    if (tableStructure.length > 0) {
      console.log(`   ‚úÖ ENUM email_type: ${tableStructure[0].COLUMN_TYPE}`);
      if (tableStructure[0].COLUMN_TYPE.includes('reminder_past')) {
        console.log('   ‚úÖ Tipo reminder_past est√° presente no ENUM');
      } else {
        console.log('   ‚ùå Tipo reminder_past est√° AUSENTE no ENUM');
      }
    }
    
    // 2. Verificar emails j√° enviados
    console.log('\nüìß 2. EMAILS J√Å ENVIADOS:');
    const existingEmails = await executeQuery(`
      SELECT 
        application_id,
        email_type,
        status,
        DATE_FORMAT(created_at, '%H:%i:%s') as hora,
        DATE_FORMAT(sent_at, '%H:%i:%s') as enviado
      FROM hr_interview_email_logs
      WHERE DATE(created_at) = CURDATE()
      AND email_type IN ('reminder_15min', 'reminder_past')
      ORDER BY created_at DESC
      LIMIT 10
    `);
    
    if (existingEmails.length > 0) {
      console.log(`   Total: ${existingEmails.length} emails`);
      existingEmails.forEach((email, idx) => {
        console.log(`   ${idx + 1}. App ${email.application_id}: ${email.email_type} (${email.status}) - ${email.hora}`);
      });
    } else {
      console.log('   Nenhum email enviado hoje');
    }
    
    // 3. Testar fun√ß√£o getUpcomingInterviews
    console.log('\nüîç 3. TESTANDO getUpcomingInterviews:');
    const upcomingInterviews = await getUpcomingInterviews();
    
    console.log(`   Entrevistas retornadas: ${upcomingInterviews.length}`);
    
    if (upcomingInterviews.length > 0) {
      upcomingInterviews.forEach(interview => {
        console.log(`   - ${interview.candidate_name} (${interview.interview_time}): ${interview.minutes_until} min`);
      });
      console.log('   ‚ö†Ô∏è ATEN√á√ÉO: Entrevistas ainda sendo retornadas - pode gerar emails!');
    } else {
      console.log('   ‚úÖ Nenhuma entrevista retornada - sistema bloqueando corretamente');
    }
    
    // 4. Verificar query NOT EXISTS espec√≠fica
    console.log('\nüîç 4. TESTANDO QUERY NOT EXISTS:');
    if (existingEmails.length > 0) {
      const testAppId = existingEmails[0].application_id;
      
      const blockTest = await executeQuery(`
        SELECT 
          ja.id,
          EXISTS (
            SELECT 1 
            FROM hr_interview_email_logs el2 
            WHERE el2.application_id = ja.id 
            AND DATE(el2.interview_date) = DATE(ja.interview_date)
            AND el2.email_type IN ('reminder_15min', 'reminder_past')
            AND (
              el2.status = 'sent' 
              OR (el2.status = 'pending' AND el2.created_at > DATE_SUB(NOW(), INTERVAL 1 HOUR))
            )
          ) as should_block
        FROM hr_job_applications ja
        WHERE ja.id = ?
      `, [testAppId]);
      
      if (blockTest.length > 0) {
        console.log(`   Application ${testAppId}: ${blockTest[0].should_block ? '‚úÖ BLOQUEADO' : '‚ùå N√ÉO BLOQUEADO'}`);
      }
    } else {
      console.log('   Nenhum email para testar');
    }
    
    // 5. Teste de configura√ß√£o do cron
    console.log('\n‚è∞ 5. CONFIGURA√á√ÉO DO CRON:');
    console.log('   ‚úÖ Execu√ß√£o a cada minuto: * * * * *');
    console.log('   ‚úÖ Prote√ß√£o contra duplicatas: Tabela hr_interview_email_logs');
    console.log('   ‚úÖ Query NOT EXISTS: Usando DATE() para compara√ß√£o');
    
    // 6. Recomenda√ß√µes finais
    console.log('\nüí° 6. STATUS DO SISTEMA:');
    
    if (upcomingInterviews.length === 0 && existingEmails.length > 0) {
      console.log('   ‚úÖ SISTEMA FUNCIONANDO CORRETAMENTE!');
      console.log('   - Emails j√° foram enviados');
      console.log('   - Fun√ß√£o n√£o retorna mais entrevistas');
      console.log('   - Prote√ß√£o contra duplicatas ativa');
    } else if (upcomingInterviews.length > 0) {
      console.log('   ‚ö†Ô∏è SISTEMA AINDA PODE ENVIAR EMAILS');
      console.log('   - Verifique se a query NOT EXISTS est√° funcionando');
      console.log('   - Pode ser que a entrevista seja nova e precise do primeiro email');
    } else {
      console.log('   ‚ÑπÔ∏è SISTEMA PRONTO PARA FUNCIONAR');
      console.log('   - Nenhum email enviado ainda');
      console.log('   - Aguardando pr√≥xima execu√ß√£o do cron');
    }
    
    console.log('\nüöÄ EXECU√á√ÉO A CADA MINUTO CONFIGURADA!');
    console.log('   O sistema agora verifica entrevistas a cada minuto,');
    console.log('   mas s√≥ envia 1 email por entrevista gra√ßas √† prote√ß√£o');
    console.log('   da tabela hr_interview_email_logs.');
    
  } catch (error) {
    console.error('\n‚ùå Erro no teste:', error);
  }
  
  process.exit(0);
}

// Executar teste
testFinalSystem(); 